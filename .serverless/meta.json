{
  "C:\\Source\\gaming app\\simplegamebyAI\\scoregame-api": {
    "versionSfCore": null,
    "versionFramework": "4.4.18",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "logicalheads",
            "app": "scoregame-api",
            "service": "game-backend",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "region": "us-east-1",
              "profile": "default",
              "environment": {
                "DYNAMODB_TABLE": "GameScores"
              },
              "logs": {
                "restApi": {
                  "accessLogging": true,
                  "executionLogging": true,
                  "level": "INFO",
                  "fullExecutionData": true
                }
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "bedrock:InvokeModel"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "GameScoresTable",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "bedrock:InvokeModelWithResponseStream",
                        "bedrock:InvokeModel"
                      ],
                      "Resource": [
                        "arn:aws:logs:us-east-1:*:*",
                        "arn:aws:bedrock:*::foundation-model/*",
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                        }
                      ]
                    }
                  ]
                }
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "AppLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/game-backend-dev-app"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "game-backend",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:Scan",
                                  "bedrock:InvokeModel"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "GameScoresTable",
                                      "Arn"
                                    ]
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents",
                                  "bedrock:InvokeModelWithResponseStream",
                                  "bedrock:InvokeModel"
                                ],
                                "Resource": [
                                  "arn:aws:logs:us-east-1:*:*",
                                  "arn:aws:bedrock:*::foundation-model/*",
                                  {
                                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                                  },
                                  {
                                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                                  },
                                  {
                                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                                  },
                                  {
                                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "game-backend",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "AppLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
                        "S3Key": "serverless/game-backend/dev/1736321520006-2025-01-08T07:32:00.006Z/game-backend.zip"
                      },
                      "Handler": "index.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "game-backend-dev-app",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DYNAMODB_TABLE": "GameScores"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AppLogGroup"
                    ]
                  },
                  "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AppLambdaFunction"
                      },
                      "CodeSha256": "KL1ns391smNs7eTtPuVVZgoi0vGEbO0yhtn5JLnIcV8="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-game-backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceSavesession": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "savesession",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceGetsessions": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "getsessions",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceGetsessionsUsernameVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceGetsessions"
                      },
                      "PathPart": "{username}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceNpcDashinteraction": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "npc-interaction",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceProxyVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "{proxy+}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodSavesessionOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSavesession"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodGetsessionsUsernameVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                              "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceGetsessionsUsernameVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodNpcDashinteractionOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceNpcDashinteraction"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodProxyVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "AWS_PROXY",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ],
                        "IntegrationHttpMethod": "POST",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceProxyVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>"
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSavesessionPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSavesession"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodGetsessionsUsernameVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceGetsessionsUsernameVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodNpcDashinteractionPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceNpcDashinteraction"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1736321475671": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodSavesessionOptions",
                      "ApiGatewayMethodGetsessionsUsernameVarOptions",
                      "ApiGatewayMethodNpcDashinteractionOptions",
                      "ApiGatewayMethodProxyVarOptions",
                      "ApiGatewayMethodSavesessionPost",
                      "ApiGatewayMethodGetsessionsUsernameVarGet",
                      "ApiGatewayMethodNpcDashinteractionPost",
                      "ApiGatewayMethodProxyVarOptions"
                    ]
                  },
                  "AppLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AppLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ApiGatewayLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/api-gateway/game-backend-dev"
                    }
                  },
                  "CustomApiGatewayAccountCloudWatchRole": {
                    "Type": "Custom::ApiGatewayAccountRole",
                    "Version": "1.0",
                    "Properties": {
                      "ServiceToken": "<REDACTED>"
                    }
                  },
                  "IamRoleCustomResourcesLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "dev",
                                "game-backend",
                                "custom-resources-lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "iam:",
                                      {
                                        "Ref": "AWS::AccountId"
                                      },
                                      "role/*"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "iam:AttachRolePolicy",
                                  "iam:CreateRole",
                                  "iam:ListAttachedRolePolicies",
                                  "iam:PassRole"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "apigateway:*::/account"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "apigateway:GET",
                                  "apigateway:PATCH"
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
                        "S3Key": "serverless/game-backend/dev/1736321520006-2025-01-08T07:32:00.006Z/custom-resources.zip"
                      },
                      "FunctionName": "game-backend-dev-custom-resource-apigw-cw-role",
                      "Handler": "api-gateway-cloud-watch-role/handler.handler",
                      "MemorySize": 1024,
                      "Runtime": "nodejs20.x",
                      "Timeout": 180,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleCustomResourcesLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "IamRoleCustomResourcesLambdaExecution",
                      "CustomDashresourceDashapigwDashcwDashroleLogGroup"
                    ]
                  },
                  "CustomDashresourceDashapigwDashcwDashroleLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/game-backend-dev-custom-resource-apigw-cw-role"
                    }
                  },
                  "GameScoresTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "GameScores",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "username",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "username",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "BedrockPolicy": {
                    "Type": "AWS::IAM::ManagedPolicy",
                    "Properties": {
                      "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Action": [
                              "bedrock:InvokeModel"
                            ],
                            "Resource": [
                              {
                                "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                              },
                              {
                                "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                              },
                              {
                                "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                              },
                              {
                                "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "LambdaRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": "sts:AssumeRole"
                          }
                        ]
                      }
                    }
                  },
                  "ApiGatewayAccount": {
                    "Type": "AWS::ApiGateway::Account",
                    "Properties": {
                      "CloudWatchRoleArn": {
                        "Fn::GetAtt": [
                          "ApiGatewayCloudWatchLogsRole",
                          "Arn"
                        ]
                      }
                    }
                  },
                  "ApiGatewayCloudWatchLogsRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": "apigateway.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                          }
                        ]
                      },
                      "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
                        {
                          "Ref": "BedrockPolicy"
                        },
                        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                      ],
                      "Policies": [
                        {
                          "PolicyName": "DynamoDBAccess",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:Scan"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "GameScoresTable",
                                      "Arn"
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
                    "Export": {
                      "Name": "sls-game-backend-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "AppLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk"
                    },
                    "Export": {
                      "Name": "sls-game-backend-dev-AppLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-game-backend-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "custom": {
              "allowedHeaders": [
                "Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Requested-With",
                "Access-Control-Allow-Headers",
                "Access-Control-Allow-Origin",
                "Access-Control-Allow-Methods"
              ],
              "logFormat": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"caller\":\"$context.identity.caller\",\"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
            },
            "functions": {
              "app": {
                "handler": "index.handler",
                "events": [
                  {
                    "http": {
                      "path": "savesession",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "POST",
                          "OPTIONS"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Requested-With",
                          "Access-Control-Allow-Headers",
                          "Access-Control-Allow-Origin",
                          "Access-Control-Allow-Methods"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "http": {
                      "path": "getsessions/{username}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "GET",
                          "OPTIONS"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Requested-With",
                          "Access-Control-Allow-Headers",
                          "Access-Control-Allow-Origin",
                          "Access-Control-Allow-Methods"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "http": {
                      "path": "npc-interaction",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "POST",
                          "OPTIONS"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Requested-With",
                          "Access-Control-Allow-Headers",
                          "Access-Control-Allow-Origin",
                          "Access-Control-Allow-Methods"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "http": {
                      "path": "{proxy+}",
                      "method": "options",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "GET",
                          "POST",
                          "PUT",
                          "DELETE",
                          "OPTIONS"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Requested-With",
                          "Access-Control-Allow-Headers",
                          "Access-Control-Allow-Origin",
                          "Access-Control-Allow-Methods"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "game-backend-dev-app",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk"
              }
            },
            "resources": {
              "Resources": {
                "GameScoresTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "GameScores",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "username",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "username",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "BedrockPolicy": {
                  "Type": "AWS::IAM::ManagedPolicy",
                  "Properties": {
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "bedrock:InvokeModel"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "LambdaRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "lambda.amazonaws.com"
                            ]
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                    }
                  }
                },
                "ApiGatewayAccount": {
                  "Type": "AWS::ApiGateway::Account",
                  "Properties": {
                    "CloudWatchRoleArn": {
                      "Fn::GetAtt": [
                        "ApiGatewayCloudWatchLogsRole",
                        "Arn"
                      ]
                    }
                  }
                },
                "ApiGatewayCloudWatchLogsRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "apigateway.amazonaws.com"
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                    },
                    "ManagedPolicyArns": [
                      "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
                      {
                        "Ref": "BedrockPolicy"
                      },
                      "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    ],
                    "Policies": [
                      {
                        "PolicyName": "DynamoDBAccess",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "dynamodb:PutItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan"
                              ],
                              "Resource": [
                                {
                                  "Fn::GetAtt": [
                                    "GameScoresTable",
                                    "Arn"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "C:\\Source\\gaming app\\simplegamebyAI\\scoregame-api",
          "config": {
            "type": "self"
          },
          "options": {
            "verbose": true
          },
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:self",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "logicalheads",
            "app": "scoregame-api",
            "service": "game-backend",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "region": "us-east-1",
              "profile": "default",
              "environment": {
                "DYNAMODB_TABLE": "GameScores"
              },
              "logs": {
                "restApi": {
                  "accessLogging": true,
                  "executionLogging": true,
                  "level": "INFO",
                  "fullExecutionData": true
                }
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:Scan",
                        "bedrock:InvokeModel"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "GameScoresTable",
                            "Arn"
                          ]
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "bedrock:InvokeModelWithResponseStream",
                        "bedrock:InvokeModel"
                      ],
                      "Resource": [
                        "arn:aws:logs:us-east-1:*:*",
                        "arn:aws:bedrock:*::foundation-model/*",
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                        }
                      ]
                    }
                  ]
                }
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "AppLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/game-backend-dev-app"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "game-backend",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:Scan",
                                  "bedrock:InvokeModel"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "GameScoresTable",
                                      "Arn"
                                    ]
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogGroup",
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents",
                                  "bedrock:InvokeModelWithResponseStream",
                                  "bedrock:InvokeModel"
                                ],
                                "Resource": [
                                  "arn:aws:logs:us-east-1:*:*",
                                  "arn:aws:bedrock:*::foundation-model/*",
                                  {
                                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                                  },
                                  {
                                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                                  },
                                  {
                                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                                  },
                                  {
                                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "game-backend",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "AppLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
                        "S3Key": "serverless/game-backend/dev/1736321520006-2025-01-08T07:32:00.006Z/game-backend.zip"
                      },
                      "Handler": "index.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "game-backend-dev-app",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DYNAMODB_TABLE": "GameScores"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AppLogGroup"
                    ]
                  },
                  "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AppLambdaFunction"
                      },
                      "CodeSha256": "KL1ns391smNs7eTtPuVVZgoi0vGEbO0yhtn5JLnIcV8="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-game-backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceSavesession": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "savesession",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceGetsessions": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "getsessions",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceGetsessionsUsernameVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceGetsessions"
                      },
                      "PathPart": "{username}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceNpcDashinteraction": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "npc-interaction",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceProxyVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "{proxy+}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodSavesessionOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSavesession"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodGetsessionsUsernameVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                              "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceGetsessionsUsernameVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodNpcDashinteractionOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "MOCK",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ]
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceNpcDashinteraction"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodProxyVarOptions": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "AuthorizationType": "NONE",
                      "HttpMethod": "OPTIONS",
                      "MethodResponses": [
                        {
                          "StatusCode": "200",
                          "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Origin": true,
                            "method.response.header.Access-Control-Allow-Headers": true,
                            "method.response.header.Access-Control-Allow-Methods": true
                          },
                          "ResponseModels": {}
                        }
                      ],
                      "RequestParameters": {},
                      "Integration": {
                        "Type": "AWS_PROXY",
                        "RequestTemplates": {
                          "application/json": "{statusCode:200}"
                        },
                        "ContentHandling": "CONVERT_TO_TEXT",
                        "IntegrationResponses": [
                          {
                            "StatusCode": "200",
                            "ResponseParameters": {
                              "method.response.header.Access-Control-Allow-Origin": "'*'",
                              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
                            },
                            "ResponseTemplates": {
                              "application/json": ""
                            }
                          }
                        ],
                        "IntegrationHttpMethod": "POST",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceProxyVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>"
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSavesessionPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSavesession"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodGetsessionsUsernameVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceGetsessionsUsernameVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodNpcDashinteractionPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceNpcDashinteraction"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1736321475671": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodSavesessionOptions",
                      "ApiGatewayMethodGetsessionsUsernameVarOptions",
                      "ApiGatewayMethodNpcDashinteractionOptions",
                      "ApiGatewayMethodProxyVarOptions",
                      "ApiGatewayMethodSavesessionPost",
                      "ApiGatewayMethodGetsessionsUsernameVarGet",
                      "ApiGatewayMethodNpcDashinteractionPost",
                      "ApiGatewayMethodProxyVarOptions"
                    ]
                  },
                  "AppLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AppLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ApiGatewayLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/api-gateway/game-backend-dev"
                    }
                  },
                  "CustomApiGatewayAccountCloudWatchRole": {
                    "Type": "Custom::ApiGatewayAccountRole",
                    "Version": "1.0",
                    "Properties": {
                      "ServiceToken": "<REDACTED>"
                    }
                  },
                  "IamRoleCustomResourcesLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "dev",
                                "game-backend",
                                "custom-resources-lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "iam:",
                                      {
                                        "Ref": "AWS::AccountId"
                                      },
                                      "role/*"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "iam:AttachRolePolicy",
                                  "iam:CreateRole",
                                  "iam:ListAttachedRolePolicies",
                                  "iam:PassRole"
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Resource": {
                                  "Fn::Join": [
                                    ":",
                                    [
                                      "arn",
                                      {
                                        "Ref": "AWS::Partition"
                                      },
                                      "apigateway:*::/account"
                                    ]
                                  ]
                                },
                                "Action": [
                                  "apigateway:GET",
                                  "apigateway:PATCH"
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
                        "S3Key": "serverless/game-backend/dev/1736321520006-2025-01-08T07:32:00.006Z/custom-resources.zip"
                      },
                      "FunctionName": "game-backend-dev-custom-resource-apigw-cw-role",
                      "Handler": "api-gateway-cloud-watch-role/handler.handler",
                      "MemorySize": 1024,
                      "Runtime": "nodejs20.x",
                      "Timeout": 180,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleCustomResourcesLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "IamRoleCustomResourcesLambdaExecution",
                      "CustomDashresourceDashapigwDashcwDashroleLogGroup"
                    ]
                  },
                  "CustomDashresourceDashapigwDashcwDashroleLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/game-backend-dev-custom-resource-apigw-cw-role"
                    }
                  },
                  "GameScoresTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "GameScores",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "username",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "username",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "BedrockPolicy": {
                    "Type": "AWS::IAM::ManagedPolicy",
                    "Properties": {
                      "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Action": [
                              "bedrock:InvokeModel"
                            ],
                            "Resource": [
                              {
                                "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                              },
                              {
                                "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                              },
                              {
                                "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                              },
                              {
                                "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "LambdaRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": "sts:AssumeRole"
                          }
                        ]
                      }
                    }
                  },
                  "ApiGatewayAccount": {
                    "Type": "AWS::ApiGateway::Account",
                    "Properties": {
                      "CloudWatchRoleArn": {
                        "Fn::GetAtt": [
                          "ApiGatewayCloudWatchLogsRole",
                          "Arn"
                        ]
                      }
                    }
                  },
                  "ApiGatewayCloudWatchLogsRole": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": "apigateway.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                          }
                        ]
                      },
                      "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
                        {
                          "Ref": "BedrockPolicy"
                        },
                        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                      ],
                      "Policies": [
                        {
                          "PolicyName": "DynamoDBAccess",
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:Scan"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "GameScoresTable",
                                      "Arn"
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
                    "Export": {
                      "Name": "sls-game-backend-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "AppLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk"
                    },
                    "Export": {
                      "Name": "sls-game-backend-dev-AppLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-game-backend-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "custom": {
              "allowedHeaders": [
                "Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Requested-With",
                "Access-Control-Allow-Headers",
                "Access-Control-Allow-Origin",
                "Access-Control-Allow-Methods"
              ],
              "logFormat": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"caller\":\"$context.identity.caller\",\"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
            },
            "functions": {
              "app": {
                "handler": "index.handler",
                "events": [
                  {
                    "http": {
                      "path": "savesession",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "POST",
                          "OPTIONS"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Requested-With",
                          "Access-Control-Allow-Headers",
                          "Access-Control-Allow-Origin",
                          "Access-Control-Allow-Methods"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "http": {
                      "path": "getsessions/{username}",
                      "method": "get",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "GET",
                          "OPTIONS"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Requested-With",
                          "Access-Control-Allow-Headers",
                          "Access-Control-Allow-Origin",
                          "Access-Control-Allow-Methods"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "http": {
                      "path": "npc-interaction",
                      "method": "post",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "POST",
                          "OPTIONS"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Requested-With",
                          "Access-Control-Allow-Headers",
                          "Access-Control-Allow-Origin",
                          "Access-Control-Allow-Methods"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "http": {
                      "path": "{proxy+}",
                      "method": "options",
                      "cors": {
                        "origin": "*",
                        "methods": [
                          "GET",
                          "POST",
                          "PUT",
                          "DELETE",
                          "OPTIONS"
                        ],
                        "headers": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Requested-With",
                          "Access-Control-Allow-Headers",
                          "Access-Control-Allow-Origin",
                          "Access-Control-Allow-Methods"
                        ],
                        "allowCredentials": "<REDACTED>"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "game-backend-dev-app",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk"
              }
            },
            "resources": {
              "Resources": {
                "GameScoresTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "GameScores",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "username",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "username",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "BedrockPolicy": {
                  "Type": "AWS::IAM::ManagedPolicy",
                  "Properties": {
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "bedrock:InvokeModel"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "LambdaRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": [
                              "lambda.amazonaws.com"
                            ]
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                    }
                  }
                },
                "ApiGatewayAccount": {
                  "Type": "AWS::ApiGateway::Account",
                  "Properties": {
                    "CloudWatchRoleArn": {
                      "Fn::GetAtt": [
                        "ApiGatewayCloudWatchLogsRole",
                        "Arn"
                      ]
                    }
                  }
                },
                "ApiGatewayCloudWatchLogsRole": {
                  "Type": "AWS::IAM::Role",
                  "Properties": {
                    "AssumeRolePolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "apigateway.amazonaws.com"
                          },
                          "Action": "sts:AssumeRole"
                        }
                      ]
                    },
                    "ManagedPolicyArns": [
                      "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
                      {
                        "Ref": "BedrockPolicy"
                      },
                      "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                    ],
                    "Policies": [
                      {
                        "PolicyName": "DynamoDBAccess",
                        "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                "dynamodb:PutItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan"
                              ],
                              "Resource": [
                                {
                                  "Fn::GetAtt": [
                                    "GameScoresTable",
                                    "Arn"
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "C:\\Source\\gaming app\\simplegamebyAI\\scoregame-api",
          "config": {
            "type": "sls"
          },
          "options": {
            "verbose": true
          },
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Source\\gaming app\\simplegamebyAI\\scoregame-api",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "logicalheads",
      "app": "scoregame-api",
      "service": "game-backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "us-east-1",
        "profile": "default",
        "environment": {
          "DYNAMODB_TABLE": "GameScores"
        },
        "logs": {
          "restApi": {
            "accessLogging": true,
            "executionLogging": true,
            "level": "INFO",
            "fullExecutionData": true
          }
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "bedrock:InvokeModel"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "GameScoresTable",
                      "Arn"
                    ]
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "bedrock:InvokeModelWithResponseStream",
                  "bedrock:InvokeModel"
                ],
                "Resource": [
                  "arn:aws:logs:us-east-1:*:*",
                  "arn:aws:bedrock:*::foundation-model/*",
                  {
                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                  },
                  {
                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                  },
                  {
                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                  },
                  {
                    "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                  }
                ]
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-backend-dev-app"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "game-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:Scan",
                            "bedrock:InvokeModel"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "GameScoresTable",
                                "Arn"
                              ]
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents",
                            "bedrock:InvokeModelWithResponseStream",
                            "bedrock:InvokeModel"
                          ],
                          "Resource": [
                            "arn:aws:logs:us-east-1:*:*",
                            "arn:aws:bedrock:*::foundation-model/*",
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                            },
                            {
                              "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "game-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AppLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
                  "S3Key": "serverless/game-backend/dev/1736321520006-2025-01-08T07:32:00.006Z/game-backend.zip"
                },
                "Handler": "index.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-backend-dev-app",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DYNAMODB_TABLE": "GameScores"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppLogGroup"
              ]
            },
            "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppLambdaFunction"
                },
                "CodeSha256": "KL1ns391smNs7eTtPuVVZgoi0vGEbO0yhtn5JLnIcV8="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-game-backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceSavesession": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "savesession",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetsessions": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "getsessions",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetsessionsUsernameVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceGetsessions"
                },
                "PathPart": "{username}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceNpcDashinteraction": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "npc-interaction",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSavesessionOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSavesession"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodGetsessionsUsernameVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetsessionsUsernameVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodNpcDashinteractionOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceNpcDashinteraction"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "AWS_PROXY",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ],
                  "IntegrationHttpMethod": "POST",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>"
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSavesessionPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSavesession"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetsessionsUsernameVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetsessionsUsernameVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodNpcDashinteractionPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceNpcDashinteraction"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1736321475671": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodSavesessionOptions",
                "ApiGatewayMethodGetsessionsUsernameVarOptions",
                "ApiGatewayMethodNpcDashinteractionOptions",
                "ApiGatewayMethodProxyVarOptions",
                "ApiGatewayMethodSavesessionPost",
                "ApiGatewayMethodGetsessionsUsernameVarGet",
                "ApiGatewayMethodNpcDashinteractionPost",
                "ApiGatewayMethodProxyVarOptions"
              ]
            },
            "AppLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ApiGatewayLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/api-gateway/game-backend-dev"
              }
            },
            "CustomApiGatewayAccountCloudWatchRole": {
              "Type": "Custom::ApiGatewayAccountRole",
              "Version": "1.0",
              "Properties": {
                "ServiceToken": "<REDACTED>"
              }
            },
            "IamRoleCustomResourcesLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "dev",
                          "game-backend",
                          "custom-resources-lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Resource": {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                "iam:",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "role/*"
                              ]
                            ]
                          },
                          "Action": [
                            "iam:AttachRolePolicy",
                            "iam:CreateRole",
                            "iam:ListAttachedRolePolicies",
                            "iam:PassRole"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Resource": {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                "apigateway:*::/account"
                              ]
                            ]
                          },
                          "Action": [
                            "apigateway:GET",
                            "apigateway:PATCH"
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
                  "S3Key": "serverless/game-backend/dev/1736321520006-2025-01-08T07:32:00.006Z/custom-resources.zip"
                },
                "FunctionName": "game-backend-dev-custom-resource-apigw-cw-role",
                "Handler": "api-gateway-cloud-watch-role/handler.handler",
                "MemorySize": 1024,
                "Runtime": "nodejs20.x",
                "Timeout": 180,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleCustomResourcesLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "IamRoleCustomResourcesLambdaExecution",
                "CustomDashresourceDashapigwDashcwDashroleLogGroup"
              ]
            },
            "CustomDashresourceDashapigwDashcwDashroleLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-backend-dev-custom-resource-apigw-cw-role"
              }
            },
            "GameScoresTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "GameScores",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "username",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "username",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "BedrockPolicy": {
              "Type": "AWS::IAM::ManagedPolicy",
              "Properties": {
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "bedrock:InvokeModel"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                        },
                        {
                          "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "LambdaRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                }
              }
            },
            "ApiGatewayAccount": {
              "Type": "AWS::ApiGateway::Account",
              "Properties": {
                "CloudWatchRoleArn": {
                  "Fn::GetAtt": [
                    "ApiGatewayCloudWatchLogsRole",
                    "Arn"
                  ]
                }
              }
            },
            "ApiGatewayCloudWatchLogsRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "apigateway.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                },
                "ManagedPolicyArns": [
                  "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
                  {
                    "Ref": "BedrockPolicy"
                  },
                  "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": [
                  {
                    "PolicyName": "DynamoDBAccess",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:Scan"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "GameScoresTable",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
              "Export": {
                "Name": "sls-game-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "AppLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk"
              },
              "Export": {
                "Name": "sls-game-backend-dev-AppLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-game-backend-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "custom": {
        "allowedHeaders": [
          "Content-Type",
          "X-Amz-Date",
          "Authorization",
          "X-Api-Key",
          "X-Amz-Security-Token",
          "X-Requested-With",
          "Access-Control-Allow-Headers",
          "Access-Control-Allow-Origin",
          "Access-Control-Allow-Methods"
        ],
        "logFormat": "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"caller\":\"$context.identity.caller\",\"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"
      },
      "functions": {
        "app": {
          "handler": "index.handler",
          "events": [
            {
              "http": {
                "path": "savesession",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "POST",
                    "OPTIONS"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Requested-With",
                    "Access-Control-Allow-Headers",
                    "Access-Control-Allow-Origin",
                    "Access-Control-Allow-Methods"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "getsessions/{username}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "GET",
                    "OPTIONS"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Requested-With",
                    "Access-Control-Allow-Headers",
                    "Access-Control-Allow-Origin",
                    "Access-Control-Allow-Methods"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "npc-interaction",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "POST",
                    "OPTIONS"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Requested-With",
                    "Access-Control-Allow-Headers",
                    "Access-Control-Allow-Origin",
                    "Access-Control-Allow-Methods"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "{proxy+}",
                "method": "options",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "OPTIONS"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Requested-With",
                    "Access-Control-Allow-Headers",
                    "Access-Control-Allow-Origin",
                    "Access-Control-Allow-Methods"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "game-backend-dev-app",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AppLambdaVersionigdVbdPLH3uOs9hSDS8enRf3dzLjO808TfRv3qgxk"
        }
      },
      "resources": {
        "Resources": {
          "GameScoresTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "GameScores",
              "AttributeDefinitions": [
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "username",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "BedrockPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "bedrock:InvokeModel"
                    ],
                    "Resource": [
                      {
                        "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                      },
                      {
                        "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                      },
                      {
                        "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                      },
                      {
                        "Fn::Sub": "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }
            }
          },
          "ApiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
              "CloudWatchRoleArn": {
                "Fn::GetAtt": [
                  "ApiGatewayCloudWatchLogsRole",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayCloudWatchLogsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
                {
                  "Ref": "BedrockPolicy"
                },
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "DynamoDBAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:GetItem",
                          "dynamodb:Scan"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "GameScoresTable",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "org: logicalheads\r\napp: scoregame-api\r\nservice: game-backend\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  region: us-east-1\r\n  profile: default\r\n  environment:\r\n    DYNAMODB_TABLE: GameScores\r\n  # Add logging configuration\r\n  logs:\r\n    restApi:\r\n      # Enable API Gateway logs\r\n      accessLogging: true\r\n      executionLogging: true\r\n      level: INFO  # Available levels: INFO, ERROR\r\n      fullExecutionData: true\r\n  # Add IAM role for CloudWatch Logs\r\n  iam:\r\n    role:\r\n      statements:\r\n        # Existing DynamoDB permissions\r\n        - Effect: Allow\r\n          Action:\r\n            - dynamodb:PutItem\r\n            - dynamodb:GetItem\r\n            - dynamodb:Scan\r\n            - bedrock:InvokeModel\r\n          Resource: \r\n            - Fn::GetAtt: [GameScoresTable, Arn]\r\n        # Add CloudWatch Logs permissions\r\n        - Effect: Allow\r\n          Action:\r\n            - logs:CreateLogGroup\r\n            - logs:CreateLogStream\r\n            - logs:PutLogEvents\r\n            - bedrock:InvokeModelWithResponseStream\r\n            - bedrock:InvokeModel\r\n          Resource: \r\n            - 'arn:aws:logs:${self:provider.region}:*:*'\r\n            - \"arn:aws:bedrock:*::foundation-model/*\"\r\n            - !Sub \"arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2\"\r\n            - !Sub \"arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k\"\r\n            - !Sub \"arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1\"\r\n            - !Sub \"arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1\"\r\n\r\ncustom:\r\n  allowedHeaders:\r\n    - Content-Type\r\n    - X-Amz-Date\r\n    - Authorization\r\n    - X-Api-Key\r\n    - X-Amz-Security-Token\r\n    - X-Requested-With\r\n    - Access-Control-Allow-Headers\r\n    - Access-Control-Allow-Origin\r\n    - Access-Control-Allow-Methods\r\n  logFormat: '{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"caller\":\"$context.identity.caller\",\"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}'\r\n\r\nfunctions:\r\n  app:\r\n    handler: index.handler\r\n    events:\r\n      - http:\r\n          path: /savesession\r\n          method: post\r\n          cors:  \r\n            origin: '*'\r\n            headers: ${self:custom.allowedHeaders}\r\n            methods:\r\n              - POST\r\n              - OPTIONS\r\n            allowCredentials: false\r\n      - http:\r\n          path: /getsessions/{username}\r\n          method: get\r\n          cors:  \r\n            origin: '*'\r\n            headers: ${self:custom.allowedHeaders}\r\n            methods:\r\n              - GET\r\n              - OPTIONS\r\n            allowCredentials: false\r\n      - http:\r\n          path: /npc-interaction\r\n          method: post\r\n          cors:  \r\n            origin: '*'\r\n            headers: ${self:custom.allowedHeaders}\r\n            methods:\r\n              - POST\r\n              - OPTIONS\r\n            allowCredentials: false\r\n      - http:\r\n          path: /{proxy+}\r\n          method: options\r\n          cors:\r\n            origin: '*'\r\n            headers: ${self:custom.allowedHeaders}\r\n            methods:\r\n              - GET\r\n              - POST\r\n              - PUT\r\n              - DELETE\r\n              - OPTIONS\r\n            allowCredentials: false\r\n    \r\nresources:\r\n  Resources:\r\n    # Your existing DynamoDB table configuration\r\n    GameScoresTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: GameScores\r\n        AttributeDefinitions:\r\n          - AttributeName: username\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: username\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n    \r\n    # Add explicit Bedrock policy\r\n    BedrockPolicy:\r\n      Type: AWS::IAM::ManagedPolicy\r\n      Properties:\r\n        PolicyDocument:\r\n          Version: '2012-10-17'\r\n          Statement:\r\n            - Effect: Allow\r\n              Action:\r\n                - bedrock:InvokeModel\r\n              Resource:\r\n                - !Sub \"arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2\"\r\n                - !Sub \"arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k\"\r\n                - !Sub \"arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1\"\r\n                - !Sub \"arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1\"\r\n    # Update Lambda role to include the Bedrock policy\r\n    LambdaRole:\r\n      Type: AWS::IAM::Role\r\n      Properties:\r\n        AssumeRolePolicyDocument:\r\n          Version: '2012-10-17'\r\n          Statement:\r\n            - Effect: Allow\r\n              Principal:\r\n                Service:\r\n                  - lambda.amazonaws.com\r\n              Action: sts:AssumeRole\r\n    # Add API Gateway Account Settings\r\n    ApiGatewayAccount:\r\n      Type: AWS::ApiGateway::Account\r\n      Properties:\r\n        CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn\r\n    \r\n    # Create IAM Role for API Gateway CloudWatch Logs\r\n    ApiGatewayCloudWatchLogsRole:\r\n      Type: AWS::IAM::Role\r\n      Properties:\r\n        AssumeRolePolicyDocument:\r\n          Version: '2012-10-17'\r\n          Statement:\r\n            - Effect: Allow\r\n              Principal:\r\n                Service: apigateway.amazonaws.com\r\n              Action: sts:AssumeRole\r\n        ManagedPolicyArns:\r\n          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'\r\n          - !Ref BedrockPolicy\r\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\r\n        Policies:\r\n          - PolicyName: DynamoDBAccess\r\n            PolicyDocument:\r\n              Version: '2012-10-17'\r\n              Statement:\r\n                - Effect: Allow\r\n                  Action:\r\n                    - dynamodb:PutItem\r\n                    - dynamodb:GetItem\r\n                    - dynamodb:Scan\r\n                  Resource:\r\n                    - Fn::GetAtt: [GameScoresTable, Arn]\r\n",
    "command": [
      "deploy"
    ],
    "options": {
      "verbose": true
    },
    "error": null,
    "params": {},
    "machineId": "204cd3eb7fe0662946f9912db62cc60c",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "f16caff3-e1f7-49b6-af55-755492d4b4ee",
    "orgName": "logicalheads",
    "userId": "TTPMgz3HYKLvS2FJ10",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": true
      },
      "orgObservabilityIntegrations": [
        {
          "integrationId": "3BFfjyB5jhPHgBMuYDLxWa",
          "awsAccountId": "381492073135",
          "status": "alive"
        }
      ],
      "serviceAppId": "d0bdDV2BnyYW6p6z6S",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "logicalheads",
    "subscription": null,
    "userEmail": "praveen034u@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "381492073135",
    "projectType": "traditional",
    "versionSf": "4.4.18",
    "serviceProviderAwsCfStackName": "game-backend-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:381492073135:stack/game-backend-dev/71210a80-cd60-11ef-b77a-0afffaa49c03",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:381492073135:stack/game-backend-dev/71210a80-cd60-11ef-b77a-0afffaa49c03",
    "serviceProviderAwsCfStackCreated": "2025-01-08T01:32:37.153Z",
    "serviceProviderAwsCfStackUpdated": "2025-01-08T07:32:07.334Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AppLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:381492073135:function:game-backend-dev-app:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-backend-dev-AppLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://nee5ghu8w7.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-game-backend-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-abc9cfa0-710b",
        "ExportName": "sls-game-backend-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}
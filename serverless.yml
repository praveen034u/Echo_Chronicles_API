org: logicalheads
app: scoregame-api
service: game-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  profile: default
  environment:
    DYNAMODB_TABLE: GameScores
  # Add logging configuration
  logs:
    restApi:
      # Enable API Gateway logs
      accessLogging: true
      executionLogging: true
      level: INFO  # Available levels: INFO, ERROR
      fullExecutionData: true
  # Add IAM role for CloudWatch Logs
  iam:
    role:
      statements:
        # Existing DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - bedrock:InvokeModel
          Resource: 
            - Fn::GetAtt: [GameScoresTable, Arn]
        # Add CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - bedrock:InvokeModelWithResponseStream
            - bedrock:InvokeModel
          Resource: 
            - 'arn:aws:logs:${self:provider.region}:*:*'
            - "arn:aws:bedrock:*::foundation-model/*"
            - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
            - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
            - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
            - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"

custom:
  allowedHeaders:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Requested-With
    - Access-Control-Allow-Headers
    - Access-Control-Allow-Origin
    - Access-Control-Allow-Methods
  logFormat: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'

functions:
  app:
    handler: index.handler
    events:
      - http:
          path: /savesession
          method: post
          cors:  
            origin: '*'
            headers: ${self:custom.allowedHeaders}
            methods:
              - POST
              - OPTIONS
            allowCredentials: false
      - http:
          path: /getsessions/{username}
          method: get
          cors:  
            origin: '*'
            headers: ${self:custom.allowedHeaders}
            methods:
              - GET
              - OPTIONS
            allowCredentials: false
      - http:
          path: /npc-interaction
          method: post
          cors:  
            origin: '*'
            headers: ${self:custom.allowedHeaders}
            methods:
              - POST
              - OPTIONS
            allowCredentials: false
      - http:
          path: /{proxy+}
          method: options
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowCredentials: false
    
resources:
  Resources:
    # Your existing DynamoDB table configuration
    GameScoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GameScores
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    # Add explicit Bedrock policy
    BedrockPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource:
                - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2"
                - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v2-100k"
                - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-v1"
                - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-instant-v1"
    # Update Lambda role to include the Bedrock policy
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
    # Add API Gateway Account Settings
    ApiGatewayAccount:
      Type: AWS::ApiGateway::Account
      Properties:
        CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn
    
    # Create IAM Role for API Gateway CloudWatch Logs
    ApiGatewayCloudWatchLogsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
          - !Ref BedrockPolicy
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: DynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:Scan
                  Resource:
                    - Fn::GetAtt: [GameScoresTable, Arn]
